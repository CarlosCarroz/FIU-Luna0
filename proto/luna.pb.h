// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/luna.proto
// Protobuf C++ Version: 5.29.3

#ifndef proto_2fluna_2eproto_2epb_2eh
#define proto_2fluna_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fluna_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fluna_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2fluna_2eproto;
namespace luna {
class AxisEvent;
struct AxisEventDefaultTypeInternal;
extern AxisEventDefaultTypeInternal _AxisEvent_default_instance_;
class ButtonEvent;
struct ButtonEventDefaultTypeInternal;
extern ButtonEventDefaultTypeInternal _ButtonEvent_default_instance_;
class ControllerEvent;
struct ControllerEventDefaultTypeInternal;
extern ControllerEventDefaultTypeInternal _ControllerEvent_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
}  // namespace luna
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace luna {

// ===================================================================


// -------------------------------------------------------------------

class Empty final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:luna.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Empty* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Empty));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Empty(
      ::google::protobuf::internal::ConstantInitialized);

  inline Empty(const Empty& from) : Empty(nullptr, from) {}
  inline Empty(Empty&& from) noexcept
      : Empty(nullptr, std::move(from)) {}
  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
        &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Empty& a, Empty& b) { a.Swap(&b); }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Empty>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "luna.Empty"; }

 protected:
  explicit Empty(::google::protobuf::Arena* arena);
  Empty(::google::protobuf::Arena* arena, const Empty& from);
  Empty(::google::protobuf::Arena* arena, Empty&& from) noexcept
      : Empty(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:luna.Empty)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Empty& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_proto_2fluna_2eproto;
};
// -------------------------------------------------------------------

class ButtonEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:luna.ButtonEvent) */ {
 public:
  inline ButtonEvent() : ButtonEvent(nullptr) {}
  ~ButtonEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ButtonEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ButtonEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ButtonEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline ButtonEvent(const ButtonEvent& from) : ButtonEvent(nullptr, from) {}
  inline ButtonEvent(ButtonEvent&& from) noexcept
      : ButtonEvent(nullptr, std::move(from)) {}
  inline ButtonEvent& operator=(const ButtonEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ButtonEvent& operator=(ButtonEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ButtonEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ButtonEvent* internal_default_instance() {
    return reinterpret_cast<const ButtonEvent*>(
        &_ButtonEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ButtonEvent& a, ButtonEvent& b) { a.Swap(&b); }
  inline void Swap(ButtonEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ButtonEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ButtonEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ButtonEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ButtonEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ButtonEvent& from) { ButtonEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ButtonEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "luna.ButtonEvent"; }

 protected:
  explicit ButtonEvent(::google::protobuf::Arena* arena);
  ButtonEvent(::google::protobuf::Arena* arena, const ButtonEvent& from);
  ButtonEvent(::google::protobuf::Arena* arena, ButtonEvent&& from) noexcept
      : ButtonEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 3,
    kCodeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 code = 1;
  void clear_code() ;
  ::int32_t code() const;
  void set_code(::int32_t value);

  private:
  ::int32_t _internal_code() const;
  void _internal_set_code(::int32_t value);

  public:
  // int32 value = 2;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:luna.ButtonEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      29, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ButtonEvent& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t code_;
    ::int32_t value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fluna_2eproto;
};
// -------------------------------------------------------------------

class AxisEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:luna.AxisEvent) */ {
 public:
  inline AxisEvent() : AxisEvent(nullptr) {}
  ~AxisEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AxisEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AxisEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AxisEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline AxisEvent(const AxisEvent& from) : AxisEvent(nullptr, from) {}
  inline AxisEvent(AxisEvent&& from) noexcept
      : AxisEvent(nullptr, std::move(from)) {}
  inline AxisEvent& operator=(const AxisEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AxisEvent& operator=(AxisEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AxisEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const AxisEvent* internal_default_instance() {
    return reinterpret_cast<const AxisEvent*>(
        &_AxisEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AxisEvent& a, AxisEvent& b) { a.Swap(&b); }
  inline void Swap(AxisEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AxisEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AxisEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AxisEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AxisEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AxisEvent& from) { AxisEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AxisEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "luna.AxisEvent"; }

 protected:
  explicit AxisEvent(::google::protobuf::Arena* arena);
  AxisEvent(::google::protobuf::Arena* arena, const AxisEvent& from);
  AxisEvent(::google::protobuf::Arena* arena, AxisEvent&& from) noexcept
      : AxisEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 3,
    kCodeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 code = 1;
  void clear_code() ;
  ::int32_t code() const;
  void set_code(::int32_t value);

  private:
  ::int32_t _internal_code() const;
  void _internal_set_code(::int32_t value);

  public:
  // float value = 2;
  void clear_value() ;
  float value() const;
  void set_value(float value);

  private:
  float _internal_value() const;
  void _internal_set_value(float value);

  public:
  // @@protoc_insertion_point(class_scope:luna.AxisEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      27, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AxisEvent& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t code_;
    float value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fluna_2eproto;
};
// -------------------------------------------------------------------

class ControllerEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:luna.ControllerEvent) */ {
 public:
  inline ControllerEvent() : ControllerEvent(nullptr) {}
  ~ControllerEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ControllerEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ControllerEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ControllerEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline ControllerEvent(const ControllerEvent& from) : ControllerEvent(nullptr, from) {}
  inline ControllerEvent(ControllerEvent&& from) noexcept
      : ControllerEvent(nullptr, std::move(from)) {}
  inline ControllerEvent& operator=(const ControllerEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerEvent& operator=(ControllerEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerEvent& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kAxis = 1,
    kButton = 2,
    EVENT_NOT_SET = 0,
  };
  static inline const ControllerEvent* internal_default_instance() {
    return reinterpret_cast<const ControllerEvent*>(
        &_ControllerEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ControllerEvent& a, ControllerEvent& b) { a.Swap(&b); }
  inline void Swap(ControllerEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ControllerEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControllerEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ControllerEvent& from) { ControllerEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ControllerEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "luna.ControllerEvent"; }

 protected:
  explicit ControllerEvent(::google::protobuf::Arena* arena);
  ControllerEvent(::google::protobuf::Arena* arena, const ControllerEvent& from);
  ControllerEvent(::google::protobuf::Arena* arena, ControllerEvent&& from) noexcept
      : ControllerEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAxisFieldNumber = 1,
    kButtonFieldNumber = 2,
  };
  // .luna.AxisEvent axis = 1;
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;

  public:
  void clear_axis() ;
  const ::luna::AxisEvent& axis() const;
  PROTOBUF_NODISCARD ::luna::AxisEvent* release_axis();
  ::luna::AxisEvent* mutable_axis();
  void set_allocated_axis(::luna::AxisEvent* value);
  void unsafe_arena_set_allocated_axis(::luna::AxisEvent* value);
  ::luna::AxisEvent* unsafe_arena_release_axis();

  private:
  const ::luna::AxisEvent& _internal_axis() const;
  ::luna::AxisEvent* _internal_mutable_axis();

  public:
  // .luna.ButtonEvent button = 2;
  bool has_button() const;
  private:
  bool _internal_has_button() const;

  public:
  void clear_button() ;
  const ::luna::ButtonEvent& button() const;
  PROTOBUF_NODISCARD ::luna::ButtonEvent* release_button();
  ::luna::ButtonEvent* mutable_button();
  void set_allocated_button(::luna::ButtonEvent* value);
  void unsafe_arena_set_allocated_button(::luna::ButtonEvent* value);
  ::luna::ButtonEvent* unsafe_arena_release_button();

  private:
  const ::luna::ButtonEvent& _internal_button() const;
  ::luna::ButtonEvent* _internal_mutable_button();

  public:
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:luna.ControllerEvent)
 private:
  class _Internal;
  void set_has_axis();
  void set_has_button();
  inline bool has_event() const;
  inline void clear_has_event();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ControllerEvent& from_msg);
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::luna::AxisEvent* axis_;
      ::luna::ButtonEvent* button_;
    } event_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fluna_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ControllerEvent

// .luna.AxisEvent axis = 1;
inline bool ControllerEvent::has_axis() const {
  return event_case() == kAxis;
}
inline bool ControllerEvent::_internal_has_axis() const {
  return event_case() == kAxis;
}
inline void ControllerEvent::set_has_axis() {
  _impl_._oneof_case_[0] = kAxis;
}
inline void ControllerEvent::clear_axis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kAxis) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.axis_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.axis_);
    }
    clear_has_event();
  }
}
inline ::luna::AxisEvent* ControllerEvent::release_axis() {
  // @@protoc_insertion_point(field_release:luna.ControllerEvent.axis)
  if (event_case() == kAxis) {
    clear_has_event();
    auto* temp = _impl_.event_.axis_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.axis_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::luna::AxisEvent& ControllerEvent::_internal_axis() const {
  return event_case() == kAxis ? *_impl_.event_.axis_ : reinterpret_cast<::luna::AxisEvent&>(::luna::_AxisEvent_default_instance_);
}
inline const ::luna::AxisEvent& ControllerEvent::axis() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:luna.ControllerEvent.axis)
  return _internal_axis();
}
inline ::luna::AxisEvent* ControllerEvent::unsafe_arena_release_axis() {
  // @@protoc_insertion_point(field_unsafe_arena_release:luna.ControllerEvent.axis)
  if (event_case() == kAxis) {
    clear_has_event();
    auto* temp = _impl_.event_.axis_;
    _impl_.event_.axis_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ControllerEvent::unsafe_arena_set_allocated_axis(::luna::AxisEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_axis();
    _impl_.event_.axis_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:luna.ControllerEvent.axis)
}
inline ::luna::AxisEvent* ControllerEvent::_internal_mutable_axis() {
  if (event_case() != kAxis) {
    clear_event();
    set_has_axis();
    _impl_.event_.axis_ =
        ::google::protobuf::Message::DefaultConstruct<::luna::AxisEvent>(GetArena());
  }
  return _impl_.event_.axis_;
}
inline ::luna::AxisEvent* ControllerEvent::mutable_axis() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::luna::AxisEvent* _msg = _internal_mutable_axis();
  // @@protoc_insertion_point(field_mutable:luna.ControllerEvent.axis)
  return _msg;
}

// .luna.ButtonEvent button = 2;
inline bool ControllerEvent::has_button() const {
  return event_case() == kButton;
}
inline bool ControllerEvent::_internal_has_button() const {
  return event_case() == kButton;
}
inline void ControllerEvent::set_has_button() {
  _impl_._oneof_case_[0] = kButton;
}
inline void ControllerEvent::clear_button() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kButton) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.button_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.button_);
    }
    clear_has_event();
  }
}
inline ::luna::ButtonEvent* ControllerEvent::release_button() {
  // @@protoc_insertion_point(field_release:luna.ControllerEvent.button)
  if (event_case() == kButton) {
    clear_has_event();
    auto* temp = _impl_.event_.button_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.button_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::luna::ButtonEvent& ControllerEvent::_internal_button() const {
  return event_case() == kButton ? *_impl_.event_.button_ : reinterpret_cast<::luna::ButtonEvent&>(::luna::_ButtonEvent_default_instance_);
}
inline const ::luna::ButtonEvent& ControllerEvent::button() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:luna.ControllerEvent.button)
  return _internal_button();
}
inline ::luna::ButtonEvent* ControllerEvent::unsafe_arena_release_button() {
  // @@protoc_insertion_point(field_unsafe_arena_release:luna.ControllerEvent.button)
  if (event_case() == kButton) {
    clear_has_event();
    auto* temp = _impl_.event_.button_;
    _impl_.event_.button_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ControllerEvent::unsafe_arena_set_allocated_button(::luna::ButtonEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_button();
    _impl_.event_.button_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:luna.ControllerEvent.button)
}
inline ::luna::ButtonEvent* ControllerEvent::_internal_mutable_button() {
  if (event_case() != kButton) {
    clear_event();
    set_has_button();
    _impl_.event_.button_ =
        ::google::protobuf::Message::DefaultConstruct<::luna::ButtonEvent>(GetArena());
  }
  return _impl_.event_.button_;
}
inline ::luna::ButtonEvent* ControllerEvent::mutable_button() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::luna::ButtonEvent* _msg = _internal_mutable_button();
  // @@protoc_insertion_point(field_mutable:luna.ControllerEvent.button)
  return _msg;
}

inline bool ControllerEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void ControllerEvent::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline ControllerEvent::EventCase ControllerEvent::event_case() const {
  return ControllerEvent::EventCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AxisEvent

// int32 code = 1;
inline void AxisEvent::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0;
}
inline ::int32_t AxisEvent::code() const {
  // @@protoc_insertion_point(field_get:luna.AxisEvent.code)
  return _internal_code();
}
inline void AxisEvent::set_code(::int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:luna.AxisEvent.code)
}
inline ::int32_t AxisEvent::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_;
}
inline void AxisEvent::_internal_set_code(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

// float value = 2;
inline void AxisEvent::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline float AxisEvent::value() const {
  // @@protoc_insertion_point(field_get:luna.AxisEvent.value)
  return _internal_value();
}
inline void AxisEvent::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:luna.AxisEvent.value)
}
inline float AxisEvent::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void AxisEvent::_internal_set_value(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// string name = 3;
inline void AxisEvent::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AxisEvent::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:luna.AxisEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AxisEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:luna.AxisEvent.name)
}
inline std::string* AxisEvent::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:luna.AxisEvent.name)
  return _s;
}
inline const std::string& AxisEvent::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void AxisEvent::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* AxisEvent::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* AxisEvent::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:luna.AxisEvent.name)
  return _impl_.name_.Release();
}
inline void AxisEvent::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:luna.AxisEvent.name)
}

// -------------------------------------------------------------------

// ButtonEvent

// int32 code = 1;
inline void ButtonEvent::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0;
}
inline ::int32_t ButtonEvent::code() const {
  // @@protoc_insertion_point(field_get:luna.ButtonEvent.code)
  return _internal_code();
}
inline void ButtonEvent::set_code(::int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:luna.ButtonEvent.code)
}
inline ::int32_t ButtonEvent::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_;
}
inline void ButtonEvent::_internal_set_code(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

// int32 value = 2;
inline void ButtonEvent::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline ::int32_t ButtonEvent::value() const {
  // @@protoc_insertion_point(field_get:luna.ButtonEvent.value)
  return _internal_value();
}
inline void ButtonEvent::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:luna.ButtonEvent.value)
}
inline ::int32_t ButtonEvent::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void ButtonEvent::_internal_set_value(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// string name = 3;
inline void ButtonEvent::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ButtonEvent::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:luna.ButtonEvent.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ButtonEvent::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:luna.ButtonEvent.name)
}
inline std::string* ButtonEvent::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:luna.ButtonEvent.name)
  return _s;
}
inline const std::string& ButtonEvent::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void ButtonEvent::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ButtonEvent::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ButtonEvent::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:luna.ButtonEvent.name)
  return _impl_.name_.Release();
}
inline void ButtonEvent::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:luna.ButtonEvent.name)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace luna


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // proto_2fluna_2eproto_2epb_2eh
